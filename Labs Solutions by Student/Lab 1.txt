# Church booleans

tru := \t.\f.t					# The function takes two arguments and returns the first one.
fls := \t.\f.f					# The function takes two arguments and returns the second one.
test := \l.\m.\n.l m n				# The function takes has to take tru or fls as first argument. Then it applies to it its second and third argument. Hence, if l = tru, the result is m, otherwise the result is n.

# Exercise 1.1

# The function has to take two arguments. Let's rewrite or as:
# or(x, y):
# 	if x = true:
#		return true
#	else:
#		return y
# The implementation is similar to test function above.
or := \x.\y.x tru y

# The same idea for and function.
# and(x, y):
# 	if x = true:
#		return y
#	else:
#		return false
and := \x.\y.x y fls

# Church numerals

c0 := \s.\z.z
c1 := \s.\z.s z
c2 := \s.\z.s (s z)
c3 := \s.\z.s (s (s z))

# What is the meaning of cx? It takes two arguments and applies first to second x times.

inc := \n.\s.\z.s (n s z) # Note, that if we remove \s.\z. prefix from numerals (we will call it c'x), then c'x = s (c'(x-1)). Then apply to the only input argument s and z, to get c'x, then apply s c'x, then add \s.\z. to the front of the result.

# Exercise 1.2

# The another difference, that we can find between c'x and c'(x-1) is that c'x is almost c'(x-1), but with (s z) instead of z.
inc := \n.\s.\z.n s (s z)

plus := \m.\n.\s.\z.m s (n s z) 		# The idea is following: we bring number n, and substitute is as z into number m. We again use trick as in first inc to remove \s.\z. and then return it back.

times := \m.\n.m (plus n) c0 			# Let's understand, what is (plus n). It is function, that takes one number, and return it plus some constant. Remember, what is cx? It applies first argument to second x times. Let's apply (plus n), then it will apply +n to second argument x times. Obviously, the second argument has to be c0.

# Exercise 1.3

# I am not sure, that it is possible to write times without the idea of plus, hence I don't know, what is expected from us. Let's substitute the definition of plus into times.
# There is however a way to do it recursively, but it is much more complex, than just plus function.
times := \m.\n.m (\t.\s.\z.n s (t s z)) c0

# Exercise 1.4

# We will use same idea, as in times function
power := \m.\n.m (times n) c1

# Exercise 1.5

# We have to write function, that takes one argument, and returns tru, if it is c0, and fls, if cx, where x > 0. The idea is following: let apply function, which returns only fls as first argument, and tru, as second. If x > 0, then there will be at least one application of first argument, and the result will be fls.
zero := \n.n (\x.fls) tru

# WARNING: the following material is quite hard, and it is not necessary to know it for this course. I assume, reader already strongly understands the reduction rules.

# The idea of decrement is complicated. Let's define pair zz = (c0, c0), and the function ss, that from (a, b) gets (b, b + 1). Then if we apply ss to zz x times, then we will get pair (x - 1, x). Return the first element.
zz := pair c0 c0				# pair is an unknown function
ss := \p. pair (snd p) (plus c1 (snd p))	# fst and snd will be defined later.
prd := \m. fst (m ss zz)			# The decrement function

# For some reason, we are not asked to find pair, fst and snd. However, it is not very hard.
# Exercise 1.BONUS. Write functions pair, fst and snd.

pair := \m.\n.\x.x m n
fst := \x.x tru
snd := \x.x fls

# The explanation is following:
# fst (pair m n) -> fst \x.(x m n) -> \x.(x m n) tru -> tru m n -> m

# Exercise 1.6

# The idea of calculating a - b is just apply decrement to a b times.
minus := \m.\n.n prd m

# Exercise 1.7

# Assume, that complexity of application is proportional to sizes of the redexes. The program is tail recursion. We apply ss n times. At every stage we do one addition. The length of addends is proportional to current number of applications of ss. Therefore, complexity of additions is O(n^2). pair, fst and snd functions have at worst O(n) complexity. Hence, the total complexity is O(n^2).

# Exercise 1.8

# The solution is straightforward: just check, that n - m is c0.

equal := \n.\m.zero (minus n m)

# Exercise 1.8*

[x, y, z] := \c.\n.c x (c y (c z n))
nil := \c.\n.n
cons := \h.\t.\c.\n.c h (t c n)
isnil := \h.h (\x.\y.fls) tru
head := \h.(\x.\y.\z.y) (h c n)
tail := \h.\c.\n.(\x.\y.\z.z) (h c n)

fix := \f. (\x. f (\y. x x y)) (\x. f (\y. x x y))
g := \fct. \n.
	if realeq n c0
	then c1
	else (times n (fct (prd n)))
factorial := fix g

# Exercise 1.9

# NOTE: the idea of recursion used here is applicable not in all reduction strategy. We will use here outermost redex (normal) reduction strategy.

# Obviously, it is impossible to read and understand. Also I did not go into deep definitions and did many already known and obvious reductions in one step.

factorial c3 ->
fix g c3 ->
(\x. g (\y. x x y)) (\x. g (\y. x x y)) c3 ->
g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) c3 ->
times c3 ((\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c3)) ->
times c3 ((\x. g (\y. x x y)) (\x. g (\y. x x y)) (prd c3)) ->
times c3 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c3)) ->
times c3 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) c2) ->
times c3 (times c2 ((\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c2))) ->
times c3 (times c2 ((\x. g (\y. x x y)) (\x. g (\y. x x y)) (prd c2))) ->
times c3 (times c2 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c2))) ->
times c3 (times c2 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) c1)) ->
times c3 (times c2 (times c1 ((\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c1)))) ->
times c3 (times c2 (times c1 ((\x. g (\y. x x y)) (\x. g (\y. x x y)) (prd c1)))) ->
times c3 (times c2 (times c1 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) (prd c1)))) ->
times c3 (times c2 (times c1 (g (\y. (\x. g (\y. x x y)) (\x. g (\y. x x y)) y) c0))) ->
times c3 (times c2 (times c1 c1)) ->
c6

# Exercise 1.10

g := \fct. \n.
	test
	(realeq n c0)
	c1
	(times n (fct (prd n)))

# Exercise 1.11*

# After understanding the factorial function, the solution is straightforward. We will use functions from exercise 1.8*.

g := \func. \n.
	if nil n
	then c0
	else (plus (head n) (func (tail n)))
sumlist := fix g

# Rewrite in test function form

g := \func. \n.
	test
	(nil n)
	c0
	(plus (head n) (func (tail n)))
